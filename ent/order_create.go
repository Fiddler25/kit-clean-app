// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kit-clean-app/ent/order"
	"kit-clean-app/ent/product"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
}

// SetCreated sets the "created" field.
func (oc *OrderCreate) SetCreated(t time.Time) *OrderCreate {
	oc.mutation.SetCreated(t)
	return oc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreated(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreated(*t)
	}
	return oc
}

// SetUpdated sets the "updated" field.
func (oc *OrderCreate) SetUpdated(t time.Time) *OrderCreate {
	oc.mutation.SetUpdated(t)
	return oc
}

// SetNillableUpdated sets the "updated" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdated(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdated(*t)
	}
	return oc
}

// SetProductID sets the "product_id" field.
func (oc *OrderCreate) SetProductID(u uint32) *OrderCreate {
	oc.mutation.SetProductID(u)
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(i int) *OrderCreate {
	oc.mutation.SetUserID(i)
	return oc
}

// SetQuantity sets the "quantity" field.
func (oc *OrderCreate) SetQuantity(u uint8) *OrderCreate {
	oc.mutation.SetQuantity(u)
	return oc
}

// SetTotalPrice sets the "total_price" field.
func (oc *OrderCreate) SetTotalPrice(f float64) *OrderCreate {
	oc.mutation.SetTotalPrice(f)
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(u uint32) *OrderCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (oc *OrderCreate) SetProductsID(id uint32) *OrderCreate {
	oc.mutation.SetProductsID(id)
	return oc
}

// SetProducts sets the "products" edge to the Product entity.
func (oc *OrderCreate) SetProducts(p *Product) *OrderCreate {
	return oc.SetProductsID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks[*Order, OrderMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.Created(); !ok {
		v := order.DefaultCreated()
		oc.mutation.SetCreated(v)
	}
	if _, ok := oc.mutation.Updated(); !ok {
		v := order.DefaultUpdated()
		oc.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.Created(); !ok {
		return &ValidationError{Name: "created", err: errors.New(`ent: missing required field "Order.created"`)}
	}
	if _, ok := oc.mutation.Updated(); !ok {
		return &ValidationError{Name: "updated", err: errors.New(`ent: missing required field "Order.updated"`)}
	}
	if _, ok := oc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Order.product_id"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Order.user_id"`)}
	}
	if _, ok := oc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Order.quantity"`)}
	}
	if _, ok := oc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "Order.total_price"`)}
	}
	if v, ok := oc.mutation.TotalPrice(); ok {
		if err := order.TotalPriceValidator(v); err != nil {
			return &ValidationError{Name: "total_price", err: fmt.Errorf(`ent: validator failed for field "Order.total_price": %w`, err)}
		}
	}
	if _, ok := oc.mutation.ProductsID(); !ok {
		return &ValidationError{Name: "products", err: errors.New(`ent: missing required edge "Order.products"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint32))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.Created(); ok {
		_spec.SetField(order.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := oc.mutation.Updated(); ok {
		_spec.SetField(order.FieldUpdated, field.TypeTime, value)
		_node.Updated = value
	}
	if value, ok := oc.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := oc.mutation.Quantity(); ok {
		_spec.SetField(order.FieldQuantity, field.TypeUint8, value)
		_node.Quantity = value
	}
	if value, ok := oc.mutation.TotalPrice(); ok {
		_spec.SetField(order.FieldTotalPrice, field.TypeFloat64, value)
		_node.TotalPrice = value
	}
	if nodes := oc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
