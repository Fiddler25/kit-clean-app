// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kit-clean-app/ent/order"
	"kit-clean-app/ent/predicate"
	"kit-clean-app/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdated sets the "updated" field.
func (ou *OrderUpdate) SetUpdated(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdated(t)
	return ou
}

// SetProductID sets the "product_id" field.
func (ou *OrderUpdate) SetProductID(u uint32) *OrderUpdate {
	ou.mutation.SetProductID(u)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrderUpdate) AddUserID(i int) *OrderUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetQuantity sets the "quantity" field.
func (ou *OrderUpdate) SetQuantity(u uint8) *OrderUpdate {
	ou.mutation.ResetQuantity()
	ou.mutation.SetQuantity(u)
	return ou
}

// AddQuantity adds u to the "quantity" field.
func (ou *OrderUpdate) AddQuantity(u int8) *OrderUpdate {
	ou.mutation.AddQuantity(u)
	return ou
}

// SetTotalPrice sets the "total_price" field.
func (ou *OrderUpdate) SetTotalPrice(f float64) *OrderUpdate {
	ou.mutation.ResetTotalPrice()
	ou.mutation.SetTotalPrice(f)
	return ou
}

// AddTotalPrice adds f to the "total_price" field.
func (ou *OrderUpdate) AddTotalPrice(f float64) *OrderUpdate {
	ou.mutation.AddTotalPrice(f)
	return ou
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (ou *OrderUpdate) SetProductsID(id uint32) *OrderUpdate {
	ou.mutation.SetProductsID(id)
	return ou
}

// SetProducts sets the "products" edge to the Product entity.
func (ou *OrderUpdate) SetProducts(p *Product) *OrderUpdate {
	return ou.SetProductsID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (ou *OrderUpdate) ClearProducts() *OrderUpdate {
	ou.mutation.ClearProducts()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks[int, OrderMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.Updated(); !ok {
		v := order.UpdateDefaultUpdated()
		ou.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.TotalPrice(); ok {
		if err := order.TotalPriceValidator(v); err != nil {
			return &ValidationError{Name: "total_price", err: fmt.Errorf(`ent: validator failed for field "Order.total_price": %w`, err)}
		}
	}
	if _, ok := ou.mutation.ProductsID(); ou.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.products"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint32))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Updated(); ok {
		_spec.SetField(order.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Quantity(); ok {
		_spec.SetField(order.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := ou.mutation.AddedQuantity(); ok {
		_spec.AddField(order.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := ou.mutation.TotalPrice(); ok {
		_spec.SetField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalPrice(); ok {
		_spec.AddField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if ou.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdated sets the "updated" field.
func (ouo *OrderUpdateOne) SetUpdated(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdated(t)
	return ouo
}

// SetProductID sets the "product_id" field.
func (ouo *OrderUpdateOne) SetProductID(u uint32) *OrderUpdateOne {
	ouo.mutation.SetProductID(u)
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrderUpdateOne) AddUserID(i int) *OrderUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetQuantity sets the "quantity" field.
func (ouo *OrderUpdateOne) SetQuantity(u uint8) *OrderUpdateOne {
	ouo.mutation.ResetQuantity()
	ouo.mutation.SetQuantity(u)
	return ouo
}

// AddQuantity adds u to the "quantity" field.
func (ouo *OrderUpdateOne) AddQuantity(u int8) *OrderUpdateOne {
	ouo.mutation.AddQuantity(u)
	return ouo
}

// SetTotalPrice sets the "total_price" field.
func (ouo *OrderUpdateOne) SetTotalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalPrice()
	ouo.mutation.SetTotalPrice(f)
	return ouo
}

// AddTotalPrice adds f to the "total_price" field.
func (ouo *OrderUpdateOne) AddTotalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalPrice(f)
	return ouo
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (ouo *OrderUpdateOne) SetProductsID(id uint32) *OrderUpdateOne {
	ouo.mutation.SetProductsID(id)
	return ouo
}

// SetProducts sets the "products" edge to the Product entity.
func (ouo *OrderUpdateOne) SetProducts(p *Product) *OrderUpdateOne {
	return ouo.SetProductsID(p.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (ouo *OrderUpdateOne) ClearProducts() *OrderUpdateOne {
	ouo.mutation.ClearProducts()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks[*Order, OrderMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.Updated(); !ok {
		v := order.UpdateDefaultUpdated()
		ouo.mutation.SetUpdated(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.TotalPrice(); ok {
		if err := order.TotalPriceValidator(v); err != nil {
			return &ValidationError{Name: "total_price", err: fmt.Errorf(`ent: validator failed for field "Order.total_price": %w`, err)}
		}
	}
	if _, ok := ouo.mutation.ProductsID(); ouo.mutation.ProductsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.products"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint32))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Updated(); ok {
		_spec.SetField(order.FieldUpdated, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Quantity(); ok {
		_spec.SetField(order.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := ouo.mutation.AddedQuantity(); ok {
		_spec.AddField(order.FieldQuantity, field.TypeUint8, value)
	}
	if value, ok := ouo.mutation.TotalPrice(); ok {
		_spec.SetField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalPrice(); ok {
		_spec.AddField(order.FieldTotalPrice, field.TypeFloat64, value)
	}
	if ouo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint32),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ProductsTable,
			Columns: []string{order.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeUint32),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
